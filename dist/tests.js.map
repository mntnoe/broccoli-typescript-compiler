{"version":3,"file":"tests.js","sources":["../tests/cases-test.ts","../tests/config-parser-test.ts","../lib/fs/path-utils.ts","../tests/path-utils-test.ts","../tests/plugin-test.ts","../tests/typescript-project-runner.ts","../tests/typescript-project-cases-test.ts"],"sourcesContent":["import { createBuilder, createReadableDir, createTempDir } from \"broccoli-test-helper\";\nimport * as fs from \"fs\";\nimport { typescript } from \"../lib/index\";\n\nconst testCasesDir = createReadableDir(\"tests/cases\");\nconst testCases = fs.readdirSync(testCasesDir.path());\nconst expectationsDir = createReadableDir(\"tests/expectations\");\n\n// tslint:disable-next-line:only-arrow-functions\nQUnit.module(\"plugin-cases\", function() {\n  testCases.forEach((testCase) => {\n    QUnit.test(testCase.replace(\"-\", \" \"), async (assert) => {\n      const tree = testCasesDir.read(testCase);\n\n      delete tree[\"tsconfig.json\"];\n      const input = await createTempDir();\n      input.write(tree);\n\n      const output = createBuilder(typescript(input.path(), {\n        compilerOptions: {\n          noEmitOnError: true,\n        },\n        rootPath: testCasesDir.path(testCase),\n      }));\n\n      await output.build();\n\n      assert.deepEqual( output.read(), expectationsDir.read(testCase) );\n    });\n  });\n});\n","import { createTempDir, TempDir } from \"broccoli-test-helper\";\nimport * as ts from \"typescript\";\nimport { ConfigParser, InputIO, PathResolver, toAbsolutePath, toCanonicalPath } from \"../lib/index\";\n\nlet root: TempDir;\nlet input: TempDir;\n\n/* tslint:disable:object-literal-sort-keys */\n/* tslint:disable:object-literal-key-quotes */\nQUnit.module(\"config-parser\", {\n  async beforeEach() {\n    [ root, input ] = await Promise.all([\n      createTempDir(),\n      createTempDir(),\n    ]);\n  },\n  async afterEach() {\n    await Promise.all([\n      root.dispose(),\n      input.dispose(),\n    ]);\n  },\n}, () => {\n  QUnit.module(\"extended config\", {\n    async beforeEach() {\n      root.write({\n        \"tsconfig.json\": `{\n          \"compilerOptions\": {\n            \"moduleResolution\": \"node\",\n            \"outDir\": \"dist\",\n            \"types\": [\"foo\"],\n            \"typeRoots\": [\n              \"typings\"\n            ]\n          }\n        }`,\n        \"lib\": {\n          \"tsconfig.json\": `{\n            \"extends\": \"../tsconfig.json\",\n            \"compilerOptions\": {\n              \"strictNullChecks\": true\n            }\n          }`,\n          \"b.ts\": \"export class B {};\",\n        },\n        \"typings\": {\n          \"foo\": {\n            \"index.d.ts\": \"export default class Foo {};\",\n          },\n        },\n      });\n      input.write({\n        \"lib\": {\n          \"a.ts\": \"export class A {};\",\n        },\n      });\n    },\n  }, () => {\n    QUnit.test(\"should be able to find the extended config\", (assert) => {\n      const rootPath = toAbsolutePath(root.path());\n      const inputPath = toAbsolutePath(input.path());\n      const parser = new ConfigParser(rootPath,\n        undefined,\n        \"lib/tsconfig.json\",\n        { module: \"umd\" },\n        rootPath,\n        new InputIO(new PathResolver(rootPath, inputPath)),\n      );\n      const parsed = parser.parseConfig();\n      assert.deepEqual( parsed.errors, [] );\n      assert.deepEqual( parsed.options, {\n        \"configFilePath\": toAbsolutePath(\"lib/tsconfig.json\", rootPath),\n        \"module\": ts.ModuleKind.UMD,\n        \"moduleResolution\": ts.ModuleResolutionKind.NodeJs,\n        \"outDir\": toCanonicalPath(\"dist\", rootPath),\n        \"strictNullChecks\": true,\n        \"typeRoots\": [\n          toCanonicalPath(\"typings\", rootPath),\n        ],\n        \"types\": [ \"foo\" ],\n      });\n      assert.deepEqual( parsed.fileNames, [\n        toAbsolutePath(\"lib/a.ts\", rootPath),\n      ]);\n    });\n  });\n});\n","import * as ts from \"typescript\";\nimport { AbsolutePath, CanonicalPath } from \"../interfaces\";\n\nconst enum CharCode {\n  Slash = 47,\n}\n\nexport const useCaseSensitiveFileNames = ts.sys.useCaseSensitiveFileNames;\nexport const getCanonicalFileName = ts.sys.useCaseSensitiveFileNames\n  ? (fileName: string) => fileName\n  : (fileName: string) => fileName.toLowerCase();\n\nexport const defaultLibLocation = ts.getDirectoryPath(toCanonicalPath(ts.sys.getExecutingFilePath()));\n\nexport function normalizePath(path: string) {\n  if (path.length === 0) {\n    return path;\n  }\n  return trimTrailingSlash(ts.normalizePath(path));\n}\n\nexport function isWithin(rootPath: AbsolutePath, path: AbsolutePath) {\n  return path.length > rootPath.length &&\n         path.lastIndexOf(rootPath, 0) === 0 &&\n         path.charCodeAt(rootPath.length) === CharCode.Slash;\n}\n\nexport function relativePathWithin(root: AbsolutePath, path: AbsolutePath): string | undefined {\n  let relativePath: string | undefined;\n  if (path.length > root.length &&\n      path.lastIndexOf(root, 0) === 0 &&\n      path.charCodeAt(root.length) === CharCode.Slash) {\n    relativePath = path.substring(root.length + 1);\n  } else if (path === root) {\n    relativePath = \"\";\n  }\n  return relativePath;\n}\n\nexport function toCanonicalPath(fileName: string, basePath?: AbsolutePath | CanonicalPath): CanonicalPath {\n  const p = ts.toPath(\n    fileName,\n    basePath === undefined ?\n      currentDirectory() : basePath, getCanonicalFileName);\n  return trimTrailingSlash(p);\n}\n\nexport function toAbsolutePath(fileName: string, basePath?: AbsolutePath): AbsolutePath {\n  const p = ts.toPath(\n    fileName,\n    basePath === undefined ?\n      currentDirectory() : basePath, (name) => name);\n\n  return trimTrailingSlash(p) as string as AbsolutePath;\n}\n\nexport { getDirectoryPath } from \"typescript\";\n\nfunction trimTrailingSlash(path: CanonicalPath): CanonicalPath;\nfunction trimTrailingSlash(path: AbsolutePath): AbsolutePath;\nfunction trimTrailingSlash(path: string): string;\nfunction trimTrailingSlash(path: string) {\n  if (path.charCodeAt(path.length - 1) === CharCode.Slash) {\n    return path.slice(0, path.length - 1);\n  }\n  return path;\n}\n\nfunction currentDirectory() {\n  return normalizePath(process.cwd()) as CanonicalPath;\n}\n\n// tslint:disable\ndeclare module \"typescript\" {\n  export function getDirectoryPath(path: ts.Path): ts.Path;\n  export function getDirectoryPath(path: string): string;\n\n  export function normalizePath(path: string): string;\n  export function toPath(fileName: string, basePath: string, getCanonicalFileName: (path: string) => string): ts.Path;\n}\n","import { relativePathWithin, toAbsolutePath } from \"../lib/fs/path-utils\";\n\nQUnit.module(\"path-utils\", () => {\n  QUnit.test(\"relativePathWithin\", (assert) => {\n    const a = toAbsolutePath(\"a\");\n    const b = toAbsolutePath(\"a/b\");\n    assert.strictEqual(relativePathWithin(a, b), \"b\");\n    assert.strictEqual(relativePathWithin(b, a), undefined);\n  });\n});\n","import { createBuilder, createTempDir } from \"broccoli-test-helper\";\nimport { typescript } from \"../lib/index\";\n\n// tslint:disable-next-line:only-arrow-functions\nQUnit.module(\"plugin-rebuild\", function() {\n  QUnit.test(\"compiles basic typescript\", async (assert) => {\n    const input = await createTempDir();\n    try {\n\n      input.write({\n        \"a.ts\": `export default class A {}`,\n        \"index.ts\": `export { default as A } from \"./a\";`,\n      });\n\n      const plugin = typescript( input.path(), {\n        tsconfig: {\n          compilerOptions: {\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            newLine: \"LF\",\n            target: \"es2015\",\n          },\n          files: [ \"index.ts\" ],\n        },\n      });\n\n      const output = createBuilder( plugin );\n      try {\n\n        await output.build();\n\n        assert.deepEqual( output.changes(), {\n          \"a.js\":     \"create\",\n          \"index.js\": \"create\",\n        });\n\n        assert.deepEqual( output.read(), {\n          \"a.js\": `\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass A {\n}\nexports.default = A;\n`,\n          \"index.js\": `\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar a_1 = require(\"./a\");\nexports.A = a_1.default;\n`,\n        });\n\n        input.write({\n          \"b.ts\": `export default class B {}`,\n          \"index.ts\": `export { default as A } from \"./a\";\nexport { default as B } from \"./b\"`,\n        });\n\n        await output.build();\n\n        assert.deepEqual( output.changes(), {\n          \"b.js\": \"create\",\n          \"index.js\": \"change\",\n        });\n\n        assert.deepEqual( output.read(), {\n          \"a.js\": `\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass A {\n}\nexports.default = A;\n`,\n          \"b.js\": `\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass B {\n}\nexports.default = B;\n`,\n          \"index.js\": `\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar a_1 = require(\"./a\");\nexports.A = a_1.default;\nvar b_1 = require(\"./b\");\nexports.B = b_1.default;\n`,\n        });\n\n        await output.build();\n\n        assert.deepEqual( output.changes(), {} );\n\n        input.write({\n          \"b.ts\": null,\n          \"index.ts\": `export { default as A } from \"./a\";`,\n        });\n\n        await output.build();\n\n        assert.deepEqual( output.changes(), {\n          \"b.js\": \"unlink\",\n          \"index.js\": \"change\",\n        });\n\n        assert.deepEqual( output.read(), {\n          \"a.js\": `\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass A {\n}\nexports.default = A;\n`,\n        \"index.js\": `\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar a_1 = require(\"./a\");\nexports.A = a_1.default;\n`,\n        });\n\n      } finally {\n        await output.dispose();\n      }\n    } finally {\n      await input.dispose();\n    }\n  });\n\n  QUnit.test(\"handles missing files\", async (assert) => {\n    const input = await createTempDir();\n    try {\n      input.write({\n        \"index.ts\": `export { default as A } from \"./a\";`,\n      });\n\n      const plugin = typescript(input.path(), {\n        tsconfig: {\n          compilerOptions: {\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            newLine: \"LF\",\n            target: \"es2015\",\n          },\n          files: [\"index.ts\"],\n        },\n      });\n\n      let error = \"\";\n      plugin.setDiagnosticWriter((msg) => error += msg);\n\n      const output = createBuilder(plugin);\n      try {\n\n        await output.build();\n\n        assert.deepEqual( output.read(), {\n          \"index.js\": `\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar a_1 = require(\"./a\");\nexports.A = a_1.default;\n`,\n        });\n\n        assert.equal(error.trim(), \"index.ts(1,30): error TS2307: Cannot find module './a'.\");\n\n      } finally {\n        await output.dispose();\n      }\n    } finally {\n      await input.dispose();\n    }\n  });\n});\n","import { createReadableDir, ReadableDir, Tree } from \"broccoli-test-helper\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as ts from \"typescript\";\nimport {\n  CompilerOptionsConfig,\n  normalizePath,\n  TypeScriptConfig,\n} from \"../lib/index\";\n\nexport interface ProjectRunnerConfig {\n  typescriptDir: string;\n}\n\n// tslint:disable:max-classes-per-file\nexport default class ProjectRunner {\n  public rootDir: string;\n  public projectJsonDir: string;\n  constructor(config: ProjectRunnerConfig) {\n    const rootDir = path.resolve(config.typescriptDir);\n    this.rootDir = rootDir;\n    this.projectJsonDir = path.join(rootDir, \"tests/cases/project\");\n  }\n\n  public each(callback: (project: Project) => void) {\n    const { rootDir, projectJsonDir } = this;\n    const entries = fs.readdirSync(projectJsonDir);\n    for (const entry of entries) {\n      const extname = path.extname(entry);\n      if (extname === \".json\") {\n        const configPath = path.join(projectJsonDir, entry);\n        const config = JSON.parse(fs.readFileSync(configPath, \"utf8\"));\n        const basename = path.basename(entry, extname);\n        if (this.shouldSkip(basename, config)) {\n          continue;\n        }\n        callback(new Project(rootDir, basename, config));\n      }\n    }\n  }\n\n  public shouldSkip(basename: string, config: ProjectConfig) {\n    return basename === \"invalidRootFile\" ||\n       /^mapRootRelativePath/.test(basename) ||\n       /^sourceRootRelativePath/.test(basename) ||\n       (/^maprootUrl/.test(basename) && !/^maprootUrlsourcerootUrl/.test(basename)) ||\n       /^maprootUrlSubfolder/.test(basename) ||\n       /^referenceResolutionRelativePaths/.test(basename) ||\n        basename === \"rootDirectoryWithSourceRoot\" ||\n        !config.baselineCheck ||\n        config.resolveMapRoot ||\n        config.resolveSourceRoot;\n  }\n}\n\nexport class Project {\n  public baselineDir: string | undefined;\n  constructor(\n    public rootDir: string,\n    public basename: string,\n    public config: ProjectConfig) {\n  }\n\n  public each(callback: (project: ProjectWithModule) => void) {\n    callback(new ProjectWithModule(this, \"amd\"));\n    callback(new ProjectWithModule(this, \"commonjs\"));\n  }\n\n  get dir() {\n    return path.join(this.rootDir, this.config.projectRoot);\n  }\n\n  get inputFiles(): string[] | undefined {\n    return this.config.inputFiles;\n  }\n\n  get compilerOptions() {\n    const { config } = this;\n    const compilerOptions: CompilerOptionsConfig = {};\n    ts.optionDeclarations.forEach((opt) => {\n      const name = opt.name;\n      if (name in config) {\n        compilerOptions[name] = config[name];\n      }\n    });\n    return compilerOptions;\n  }\n}\n\nexport class ProjectWithModule {\n  constructor(\n    public project: Project,\n    public module: string,\n  ) {}\n\n  get baselineDir(): ReadableDir {\n    return createReadableDir(path.join(\n      this.project.rootDir,\n      \"tests/baselines/reference/project\",\n      this.project.basename,\n      this.module === \"amd\" ? \"amd\" : \"node\"));\n  }\n\n  get compilerOptions(): CompilerOptionsConfig {\n    return Object.assign(this.project.compilerOptions, {\n      module: this.module,\n      newLine: \"CRLF\",\n      typeRoots: [],\n    });\n  }\n\n  get pluginConfig(): TypeScriptConfig {\n    const { project } = this;\n    const inputFiles = project.inputFiles;\n    const config: TypeScriptConfig = {\n      buildPath: this.project.dir,\n      compilerOptions: this.compilerOptions,\n      workingPath: this.project.dir,\n    };\n\n    if (inputFiles) {\n      config.compilerOptions!.moduleResolution = \"classic\";\n      config.tsconfig = {\n        files: inputFiles,\n      };\n    } else {\n      config.projectPath = project.config.project;\n    }\n\n    return config;\n  }\n\n  get baseline() {\n    return new Baseline(this.baselineDir.read(), this.project.basename);\n  }\n}\n\nexport class Baseline {\n  public config: BaselineConfig;\n  public errors: string | undefined;\n  public sourcemap: any;\n  public output: Tree;\n  constructor(tree: Tree, basename: string) {\n    const configName = basename + \".json\";\n    const errorsName = basename + \".errors.txt\";\n    const sourcemapName = basename + \"sourcemap.txt\";\n    const config: BaselineConfig = JSON.parse(tree[configName] as string);\n    this.config = config;\n    this.errors = processErrors(tree[errorsName]);\n    this.sourcemap = tree[errorsName];\n    delete tree[configName];\n    delete tree[errorsName];\n    delete tree[sourcemapName];\n    this.output = cleanExpectedTree(tree, config.emittedFiles);\n  }\n}\n\nfunction processErrors(errors: any): string | undefined {\n  if (typeof errors === \"string\") {\n    return errors\n      .toLowerCase()\n      .split(/^(?:!!!|====)/m)[0]\n      // the project runner in typescript loads the tsconfig\n      // in the runner itself, we don't so we need to remove\n      // message about adding a tsconfig may help\n      .replace(/^.*?adding a tsconfig\\.json file will help organize projects.*?$/m, \"\")\n      .split(/(?:\\r\\n|\\n)+/)\n      .join(ts.sys.newLine);\n  }\n}\n\nfunction normalizeTree(baseline: Tree) {\n  const normalized: Tree = {};\n  const files = Object.keys(baseline);\n  for (const file of files) {\n    let value = baseline[file];\n    if (typeof value === \"object\" && value !== null) {\n      value = normalizeTree(value);\n    }\n    normalized[normalizePath(file)] = value;\n  }\n  return normalized;\n}\n\nfunction cleanExpectedTree(baseline: Tree, emittedFiles?: string[]) {\n  const clean: Tree = {};\n  if (emittedFiles) {\n    const normalized = normalizeTree(baseline);\n    for (const emittedFile of emittedFiles) {\n      const parts = normalizePath(emittedFile).split(\"/\");\n      let src: Tree | string | null | undefined = normalized;\n      let target: Tree | string | null | undefined = clean;\n      for (const part of parts) {\n        if (typeof target !== \"object\" ||\n            target === null ||\n            typeof src !== \"object\" ||\n            src === null) {\n          continue;\n        }\n        if (part === \"..\") {\n          // we can let you escape the outputPath\n          // TODO, maybe support compilerOptions.project as a way to make this pass\n          // tslint:disable:no-console\n          console.warn(emittedFile);\n          break;\n        }\n        target[part] = src[part];\n        src = src[part];\n        target = target[part];\n      }\n    }\n  }\n  return clean;\n}\n\nexport interface ProjectConfig {\n  scenario: string;\n  // project where it lives - this also is the current directory when compiling\n  projectRoot: string;\n  // list of input files to be given to program\n  inputFiles: string[];\n  // should we resolve this map root and give compiler the absolute disk path as map root?\n  resolveMapRoot?: boolean;\n  // should we resolve this source root and give compiler the absolute disk path as map root?\n  resolveSourceRoot?: boolean;\n  // Verify the baselines of output files, if this is false, we will write to output to the disk\n  // but there is no verification of baselines\n  baselineCheck?: boolean;\n  // Run the resulting test\n  runTest?: boolean;\n  // If there is any bug associated with this test case\n  bug?: string;\n\n  [name: string]: any;\n}\n\nexport interface BaselineConfig extends ProjectConfig {\n  resolvedInputFiles: string[];\n  emittedFiles: string[];\n}\n\ndeclare module \"typescript\" {\n  const optionDeclarations: OptionDeclaration[];\n  interface OptionDeclaration {\n    name: string;\n  }\n}\n","import { createBuilder, createTempDir } from \"broccoli-test-helper\";\nimport ProjectRunner from \"./typescript-project-runner\";\n\nimport { toAbsolutePath, typescript } from \"../lib/index\";\n\n// tslint:disable:no-console\nconst runner = new ProjectRunner({\n  typescriptDir: \"vendor/typescript\",\n});\n\n// tslint:disable:only-arrow-functions\nQUnit.module(\"typescript-project-cases\", function() {\n  runner.each((project) => {\n    QUnit.module(project.basename, function() {\n      project.each((mod) => {\n        QUnit.test(mod.module, async function(assert) {\n          const input = await createTempDir();\n          try {\n            input.copy( project.dir );\n\n            const plugin = typescript( input.path(), mod.pluginConfig );\n\n            let errors: string | undefined;\n            plugin.setDiagnosticWriter((msg) => {\n              if (errors === undefined) {\n                errors = \"\";\n              }\n              errors += msg;\n            });\n\n            const output = createBuilder( plugin );\n            try {\n              await output.build();\n\n              const actual = output.read();\n              const baseline = mod.baseline;\n              assert.deepEqual(actual, baseline.output);\n              errors = removeRoots(errors, project.dir);\n              assert.equal(errors, baseline.errors);\n            } finally {\n              await output.dispose();\n            }\n          } finally {\n            await input.dispose();\n          }\n        });\n      });\n    });\n  });\n});\n\nfunction removeRoots(errors: string | undefined, rootPath: string) {\n  if (errors === undefined) {\n    return;\n  }\n  const root = toAbsolutePath(rootPath);\n  const pattern = new RegExp(escapeRegExp(root + \"/\"), \"g\");\n  return errors.replace(pattern, \"\").toLowerCase();\n}\n\nfunction escapeRegExp(s: string): string {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n"],"names":["const","createReadableDir","fs.readdirSync","createTempDir","createBuilder","let","ts.ModuleKind","ts.ModuleResolutionKind","ts.sys","ts.getDirectoryPath","toCanonicalPath","path","ts.normalizePath","ts.toPath","normalizePath","toAbsolutePath","relativePathWithin","path.resolve","path.join","path.extname","fs.readFileSync","path.basename","this"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAIAA,IAAM,YAAY,GAAGC,oCAAiB,CAAC,aAAa,CAAC,CAAC;AACtDD,IAAM,SAAS,GAAGE,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;AACtDF,IAAM,eAAe,GAAGC,oCAAiB,CAAC,oBAAoB,CAAC,CAAC;;AAGhE,KAAK,CAAC,MAAM,CAAC,cAAc,EAAE;;;IAC3B,SAAS,CAAC,OAAO,WAAE,QAAQ,EAAE;QAC3B,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,YAAS,MAAM,EAAE;YACpDD,IAAM,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEzC,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC;YAC7BA,IAAM,KAAK,GAAG,MAAMG,gCAAa,EAAE,CAAC;YACpC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElBH,IAAM,MAAM,GAAGI,gCAAa,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;gBACpD,eAAe,EAAE;oBACf,aAAa,EAAE,IAAI;iBACpB;gBACD,QAAQ,EAAE,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;aACtC,CAAC,CAAC,CAAC;YAEJ,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YAErB,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,IAAI,EAAE,EAAE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAE,CAAC;SACnE,IAAA,CAAC,CAAC;KACJ,CAAC,CAAC;CACJ,CAAC,CAAC;;AC1BHC,IAAI,IAAa,CAAC;AAClBA,IAAI,KAAc,CAAC;;;AAInB,KAAK,CAAC,MAAM,CAAC,eAAe,EAAE;IACtB,+BAAU;;;sBACI,MAAM,OAAO,CAAC,GAAG,CAAC;gBAClCF,gCAAa,EAAE;gBACfA,gCAAa,EAAE,EAChB,GAHC,kBAAM,KAAK,cAGV;SACJ;KAAA;IACK,6BAAS;;YACb,MAAM,OAAO,CAAC,GAAG,CAAC;gBAChB,IAAI,CAAC,OAAO,EAAE;gBACd,KAAK,CAAC,OAAO,EAAE,EAChB,CAAC,CAAC;SACJ;KAAA;CACF,cAAK;IACJ,KAAK,CAAC,MAAM,CAAC,iBAAiB,EAAE;QACxB,+BAAU;;gBACd,IAAI,CAAC,KAAK,CAAC;oBACT,eAAe,EAAE,wPASf;oBACF,KAAK,EAAE;wBACL,eAAe,EAAE,6JAKf;wBACF,MAAM,EAAE,oBAAoB;qBAC7B;oBACD,SAAS,EAAE;wBACT,KAAK,EAAE;4BACL,YAAY,EAAE,8BAA8B;yBAC7C;qBACF;iBACF,CAAC,CAAC;gBACH,KAAK,CAAC,KAAK,CAAC;oBACV,KAAK,EAAE;wBACL,MAAM,EAAE,oBAAoB;qBAC7B;iBACF,CAAC,CAAC;aACJ;SAAA;KACF,cAAK;QACJ,KAAK,CAAC,IAAI,CAAC,4CAA4C,YAAG,MAAM,EAAE;YAChEH,IAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAC7CA,IAAM,SAAS,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YAC/CA,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,EACtC,SAAS,EACT,mBAAmB,EACnB,EAAE,MAAM,EAAE,KAAK,EAAE,EACjB,QAAQ,EACR,IAAI,OAAO,CAAC,IAAI,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CACnD,CAAC;YACFA,IAAM,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,MAAM,EAAE,EAAE,CAAE,CAAC;YACtC,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,OAAO,EAAE;gBAChC,gBAAgB,EAAE,cAAc,CAAC,mBAAmB,EAAE,QAAQ,CAAC;gBAC/D,QAAQ,EAAEM,aAAa,CAAC,GAAG;gBAC3B,kBAAkB,EAAEC,uBAAuB,CAAC,MAAM;gBAClD,QAAQ,EAAE,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC;gBAC3C,kBAAkB,EAAE,IAAI;gBACxB,WAAW,EAAE;oBACX,eAAe,CAAC,SAAS,EAAE,QAAQ,CAAC,EACrC;gBACD,OAAO,EAAE,CAAE,KAAK,CAAE;aACnB,CAAC,CAAC;YACH,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,SAAS,EAAE;gBAClC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,EACrC,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ,CAAC,CAAC;CACJ,CAAC,CAAC;;AC/EIP,IAAM,yBAAyB,GAAGQ,MAAM,CAAC,yBAAyB,CAAC;AAC1E,AAAOR,IAAM,oBAAoB,GAAGQ,MAAM,CAAC,yBAAyB;gBAC/D,QAAgB,EAAE,SAAG,WAAQ;gBAC7B,QAAgB,EAAE,SAAG,QAAQ,CAAC,WAAW,KAAE,CAAC;AAEjD,AAAOR,IAAM,kBAAkB,GAAGS,mBAAmB,CAACC,iBAAe,CAACF,MAAM,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;AAEtG,yBAA8BG,OAAY;IACxC,IAAIA,OAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAOA,OAAI,CAAC;KACb;IACD,OAAO,iBAAiB,CAACC,gBAAgB,CAACD,OAAI,CAAC,CAAC,CAAC;CAClD;AAED,AAIC;AAED,8BAAmC,IAAkB,EAAEA,OAAkB;IACvEN,IAAI,YAAgC,CAAC;IACrC,IAAIM,OAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;QACzBA,OAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC;QAC/BA,OAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB;QACnD,YAAY,GAAGA,OAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KAChD;SAAM,IAAIA,OAAI,KAAK,IAAI,EAAE;QACxB,YAAY,GAAG,EAAE,CAAC;KACnB;IACD,OAAO,YAAY,CAAC;CACrB;AAED,2BAAgC,QAAgB,EAAE,QAAuC;IACvFX,IAAM,CAAC,GAAGa,SAAS,CACjB,QAAQ,EACR,QAAQ,KAAK,SAAS;QACpB,gBAAgB,EAAE,GAAG,QAAQ,EAAE,oBAAoB,CAAC,CAAC;IACzD,OAAO,iBAAiB,CAAC,CAAC,CAAC,CAAC;CAC7B;AAED,0BAA+B,QAAgB,EAAE,QAAuB;IACtEb,IAAM,CAAC,GAAGa,SAAS,CACjB,QAAQ,EACR,QAAQ,KAAK,SAAS;QACpB,gBAAgB,EAAE,GAAG,QAAQ,YAAG,IAAI,EAAE,SAAG,OAAI,CAAC,CAAC;IAEnD,OAAO,iBAAiB,CAAC,CAAC,CAA2B,CAAC;CACvD;AAED,AAKA,2BAA2BF,OAAY;IACrC,IAAIA,OAAI,CAAC,UAAU,CAACA,OAAI,CAAC,MAAM,GAAG,CAAC,CAAC,qBAAqB;QACvD,OAAOA,OAAI,CAAC,KAAK,CAAC,CAAC,EAAEA,OAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KACvC;IACD,OAAOA,OAAI,CAAC;CACb;AAED;IACE,OAAOG,eAAa,CAAC,OAAO,CAAC,GAAG,EAAE,CAAkB,CAAC;CACtD;;ACpED,KAAK,CAAC,MAAM,CAAC,YAAY,cAAK;IAC5B,KAAK,CAAC,IAAI,CAAC,oBAAoB,YAAG,MAAM,EAAE;QACxCd,IAAM,CAAC,GAAGe,gBAAc,CAAC,GAAG,CAAC,CAAC;QAC9Bf,IAAM,CAAC,GAAGe,gBAAc,CAAC,KAAK,CAAC,CAAC;QAChC,MAAM,CAAC,WAAW,CAACC,oBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAACA,oBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;KACzD,CAAC,CAAC;CACJ,CAAC,CAAC;;;ACLH,KAAK,CAAC,MAAM,CAAC,gBAAgB,EAAE;;;IAC7B,KAAK,CAAC,IAAI,CAAC,2BAA2B,YAAS,MAAM,EAAE;QACrDhB,IAAM,KAAK,GAAG,MAAMG,gCAAa,EAAE,CAAC;QACpC,IAAI;YAEF,KAAK,CAAC,KAAK,CAAC;gBACV,MAAM,EAAE,2BAA2B;gBACnC,UAAU,EAAE,uCAAqC;aAClD,CAAC,CAAC;YAEHH,IAAM,MAAM,GAAG,UAAU,CAAE,KAAK,CAAC,IAAI,EAAE,EAAE;gBACvC,QAAQ,EAAE;oBACR,eAAe,EAAE;wBACf,MAAM,EAAE,UAAU;wBAClB,gBAAgB,EAAE,MAAM;wBACxB,OAAO,EAAE,IAAI;wBACb,MAAM,EAAE,QAAQ;qBACjB;oBACD,KAAK,EAAE,CAAE,UAAU,CAAE;iBACtB;aACF,CAAC,CAAC;YAEHA,IAAM,MAAM,GAAGI,gCAAa,CAAE,MAAM,CAAE,CAAC;YACvC,IAAI;gBAEF,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;gBAErB,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,OAAO,EAAE,EAAE;oBAClC,MAAM,EAAM,QAAQ;oBACpB,UAAU,EAAE,QAAQ;iBACrB,CAAC,CAAC;gBAEH,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,IAAI,EAAE,EAAE;oBAC/B,MAAM,EAAE,yHAKjB;oBACS,UAAU,EAAE,4IAIrB;iBACQ,CAAC,CAAC;gBAEH,KAAK,CAAC,KAAK,CAAC;oBACV,MAAM,EAAE,2BAA2B;oBACnC,UAAU,EAAE,6EACa;iBAC1B,CAAC,CAAC;gBAEH,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;gBAErB,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,OAAO,EAAE,EAAE;oBAClC,MAAM,EAAE,QAAQ;oBAChB,UAAU,EAAE,QAAQ;iBACrB,CAAC,CAAC;gBAEH,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,IAAI,EAAE,EAAE;oBAC/B,MAAM,EAAE,yHAKjB;oBACS,MAAM,EAAE,yHAKjB;oBACS,UAAU,EAAE,mMAMrB;iBACQ,CAAC,CAAC;gBAEH,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;gBAErB,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,OAAO,EAAE,EAAE,EAAE,CAAE,CAAC;gBAEzC,KAAK,CAAC,KAAK,CAAC;oBACV,MAAM,EAAE,IAAI;oBACZ,UAAU,EAAE,uCAAqC;iBAClD,CAAC,CAAC;gBAEH,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;gBAErB,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,OAAO,EAAE,EAAE;oBAClC,MAAM,EAAE,QAAQ;oBAChB,UAAU,EAAE,QAAQ;iBACrB,CAAC,CAAC;gBAEH,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,IAAI,EAAE,EAAE;oBAC/B,MAAM,EAAE,yHAKjB;oBACO,UAAU,EAAE,4IAInB;iBACQ,CAAC,CAAC;aAEJ;oBAAS;gBACR,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;aACxB;SACF;gBAAS;YACR,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;SACvB;KACF,IAAA,CAAC,CAAC;IAEH,KAAK,CAAC,IAAI,CAAC,uBAAuB,YAAS,MAAM,EAAE;QACjDJ,IAAM,KAAK,GAAG,MAAMG,gCAAa,EAAE,CAAC;QACpC,IAAI;YACF,KAAK,CAAC,KAAK,CAAC;gBACV,UAAU,EAAE,uCAAqC;aAClD,CAAC,CAAC;YAEHH,IAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;gBACtC,QAAQ,EAAE;oBACR,eAAe,EAAE;wBACf,MAAM,EAAE,UAAU;wBAClB,gBAAgB,EAAE,MAAM;wBACxB,OAAO,EAAE,IAAI;wBACb,MAAM,EAAE,QAAQ;qBACjB;oBACD,KAAK,EAAE,CAAC,UAAU,CAAC;iBACpB;aACF,CAAC,CAAC;YAEHK,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,MAAM,CAAC,mBAAmB,WAAE,GAAG,EAAE,SAAG,KAAK,IAAI,MAAG,CAAC,CAAC;YAElDL,IAAM,MAAM,GAAGI,gCAAa,CAAC,MAAM,CAAC,CAAC;YACrC,IAAI;gBAEF,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;gBAErB,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,IAAI,EAAE,EAAE;oBAC/B,UAAU,EAAE,4IAIrB;iBACQ,CAAC,CAAC;gBAEH,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,yDAAyD,CAAC,CAAC;aAEvF;oBAAS;gBACR,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;aACxB;SACF;gBAAS;YACR,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;SACvB;KACF,IAAA,CAAC,CAAC;CACJ,CAAC,CAAC;;;ACxJH,oBAGE,uBAAY,MAA2B;QAC/B,OAAO,GAAGa,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC/C,CAAC,OAAO,GAAG,OAAO,CAAC;QACnB,CAAC,cAAc,GAAGC,SAAS,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;EACjE;wBAEM,sBAAK,QAAoC;;;WACb,GAAG;YAA5B;YAAS,cAAc,sBAAU;QACnC,OAAO,GAAGhB,cAAc,CAAC,cAAc,CAAC,CAAC;SAC1C,kBAAe,gCAAO,EAAE;YAAlB;;YACTF,IAAM,OAAO,GAAGmB,YAAY,CAAC,KAAK,CAAC,CAAC;YAChC,OAAO,KAAK,OAAO,EAAE;gBACjB,UAAU,GAAGD,SAAS,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;gBAC9C,MAAM,GAAG,IAAI,CAAC,KAAK,CAACE,eAAe,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;gBACzD,QAAQ,GAAGC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC3CC,MAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE;yBAC5B;aACV;oBACO,CAAC,IAAI,OAAO,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;SAClD;KACF;EACF;wBAEM,kCAAW,QAAgB,EAAE,MAAqB;WAChD,QAAQ,KAAK,iBAAiB;8BACZ,CAAC,IAAI,CAAC,QAAQ,CAAC;iCACZ,CAAC,IAAI,CAAC,QAAQ,CAAC;SACvC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;8BACtD,CAAC,IAAI,CAAC,QAAQ,CAAC;2CACF,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACzC,KAAK,6BAA6B;SACzC,MAAM,CAAC,aAAa;cACf,CAAC,cAAc;cACf,CAAC,iBAAiB,CAAC;CAC9B;;cAKD,iBACS,OAAe,EACf,QAAgB,EAChB,MAAqB;gBAFd,GAAP,OAAO,CAAQ;iBACP,GAAR,QAAQ,CAAQ;eACV,GAAN,MAAM,CAAe;;;oIAC7B;kBAEM,sBAAK,QAA8C;YAChD,CAAC,IAAI,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;YACrC,CAAC,IAAI,iBAAiB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;EACnD;mBAEG;WACKJ,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;EACzD;mBAEG;WACK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;EAC/B;mBAEG;WACc,GAAG;YAAX,MAAM,cAAU;QAClB,eAAe,GAA0B,EAAE,CAAC;yBAC7B,CAAC,OAAO,WAAE,GAAG,EAAE;YAC5B,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YAClB,IAAI,IAAI,MAAM,EAAE;2BACH,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;SACtC;KACF,CAAC,CAAC;WACI,eAAe,CAAC;CACxB;;iEACF;AAED,wBACE,2BACS,OAAgB,EAChB,MAAc;gBADP,GAAP,OAAO,CAAS;eACV,GAAN,MAAM,CAAQ;;;iLACnB;qBAEA;WACKjB,oCAAiB,CAACiB,SAAS,CAChC,IAAI,CAAC,OAAO,CAAC,OAAO,EACpB,mCAAmC,EACnC,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrB,IAAI,CAAC,MAAM,KAAK,KAAK,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;EAC5C;qBAEG;WACK,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;cAC3C,EAAE,IAAI,CAAC,MAAM;eACZ,EAAE,MAAM;iBACN,EAAE,EAAE;KACd,CAAC,CAAC;EACJ;qBAEG;WACe,GAAG;YAAZ,OAAO,eAAU;QACnB,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QAChC,MAAM,GAAqB;iBACtB,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG;uBACZ,EAAE,IAAI,CAAC,eAAe;mBAC1B,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG;KAC9B,CAAC;QAEE,UAAU,EAAE;cACR,CAAC,eAAgB,CAAC,gBAAgB,GAAG,SAAS,CAAC;cAC/C,CAAC,QAAQ,GAAG;iBACX,EAAE,UAAU;SAClB,CAAC;KACH;SAAM;cACC,CAAC,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC;KAC7C;WAEM,MAAM,CAAC;EACf;qBAEG;WACK,IAAI,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;CACrE;;6EACF;AAED,eAKE,kBAAY,IAAU,EAAE,QAAgB;QAChC,UAAU,GAAG,QAAQ,GAAG,OAAO,CAAC;QAChC,UAAU,GAAG,QAAQ,GAAG,aAAa,CAAC;QACtC,aAAa,GAAG,QAAQ,GAAG,eAAe,CAAC;QAC3C,MAAM,GAAmB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAW,CAAC,CAAC;QAClE,CAAC,MAAM,GAAG,MAAM,CAAC;QACjB,CAAC,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAC1C,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;WAC3B,IAAI,CAAC,UAAU,CAAC,CAAC;WACjB,IAAI,CAAC,UAAU,CAAC,CAAC;WACjB,IAAI,CAAC,aAAa,CAAC,CAAC;QACvB,CAAC,MAAM,GAAG,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;CAC5D,CACF;AAED,uBAAuB,MAAW;IAChC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,OAAO,MAAM;aACV,WAAW,EAAE;aACb,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;;;;aAI1B,OAAO,CAAC,mEAAmE,EAAE,EAAE,CAAC;aAChF,KAAK,CAAC,cAAc,CAAC;aACrB,IAAI,CAACV,MAAM,CAAC,OAAO,CAAC,CAAC;KACzB;CACF;AAED,uBAAuB,QAAc;IACnCR,IAAM,UAAU,GAAS,EAAE,CAAC;IAC5BA,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,KAAK,kBAAc,8BAAK,EAAE;QAArBA,IAAM;;QACTK,IAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE;YAC/C,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;SAC9B;QACD,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;KACzC;IACD,OAAO,UAAU,CAAC;CACnB;AAED,2BAA2B,QAAc,EAAE,YAAuB;IAChEL,IAAM,KAAK,GAAS,EAAE,CAAC;IACvB,IAAI,YAAY,EAAE;QAChBA,IAAM,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC3C,KAAK,sBAAqB,2CAAY,EAAE;YAAnCA,IAAM;;YACTA,IAAM,KAAK,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpDK,IAAI,GAAG,GAAqC,UAAU,CAAC;YACvDA,IAAI,MAAM,GAAqC,KAAK,CAAC;YACrD,KAAK,kBAAc,8BAAK,EAAE;gBAArBL,IAAM;;gBACT,IAAI,OAAO,MAAM,KAAK,QAAQ;oBAC1B,MAAM,KAAK,IAAI;oBACf,OAAO,GAAG,KAAK,QAAQ;oBACvB,GAAG,KAAK,IAAI,EAAE;oBAChB,SAAS;iBACV;gBACD,IAAI,IAAI,KAAK,IAAI,EAAE;;;;oBAIjB,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC1B,MAAM;iBACP;gBACD,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;gBACzB,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;gBAChB,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;aACvB;SACF;KACF;IACD,OAAO,KAAK,CAAC;CACd;;;AC/MDA,IAAM,MAAM,GAAG,IAAI,aAAa,CAAC;IAC/B,aAAa,EAAE,mBAAmB;CACnC,CAAC,CAAC;;AAGH,KAAK,CAAC,MAAM,CAAC,0BAA0B,EAAE;IACvC,MAAM,CAAC,IAAI,WAAE,OAAO,EAAE;QACpB,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE;YAC7B,OAAO,CAAC,IAAI,WAAE,GAAG,EAAE;gBACjB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,UAAe,MAAM;;wBAC1CA,IAAM,KAAK,GAAG,MAAMG,gCAAa,EAAE,CAAC;wBACpC,IAAI;4BACF,KAAK,CAAC,IAAI,CAAE,OAAO,CAAC,GAAG,CAAE,CAAC;4BAE1BH,IAAM,MAAM,GAAG,UAAU,CAAE,KAAK,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,YAAY,CAAE,CAAC;4BAE5DK,IAAI,MAA0B,CAAC;4BAC/B,MAAM,CAAC,mBAAmB,WAAE,GAAG,EAAE;gCAC/B,IAAI,MAAM,KAAK,SAAS,EAAE;oCACxB,MAAM,GAAG,EAAE,CAAC;iCACb;gCACD,MAAM,IAAI,GAAG,CAAC;6BACf,CAAC,CAAC;4BAEHL,IAAM,MAAM,GAAGI,gCAAa,CAAE,MAAM,CAAE,CAAC;4BACvC,IAAI;gCACF,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;gCAErBJ,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;gCAC7BA,IAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;gCAC9B,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;gCAC1C,MAAM,GAAG,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;gCAC1C,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;6BACvC;oCAAS;gCACR,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;6BACxB;yBACF;gCAAS;4BACR,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;yBACvB;qBACF;iBAAA,CAAC,CAAC;aACJ,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ,CAAC,CAAC;CACJ,CAAC,CAAC;AAEH,qBAAqB,MAA0B,EAAE,QAAgB;IAC/D,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,OAAO;KACR;IACDA,IAAM,IAAI,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;IACtCA,IAAM,OAAO,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;IAC1D,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;CAClD;AAED,sBAAsB,CAAS;IAC7B,OAAO,CAAC,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;CACjD;;;;;;"}